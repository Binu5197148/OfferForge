import os
from typing import Dict, List, Optional
from models import GeneratedOffer, ProductBrief, LanguageEnum
import zipfile
import io
import base64
from datetime import datetime

class LandingPageGenerator:
    def __init__(self):
        self.templates = {
            'mobile_modern': self._get_mobile_modern_template(),
            'classic_sales': self._get_classic_sales_template(),
            'minimal_clean': self._get_minimal_clean_template()
        }
    
    def generate_landing_page(
        self,
        offer: GeneratedOffer,
        brief: ProductBrief,
        template_name: str = 'mobile_modern',
        language: LanguageEnum = LanguageEnum.PT_BR
    ) -> Dict[str, str]:
        """Generate a complete landing page with HTML, CSS, and JS"""
        
        if template_name not in self.templates:
            template_name = 'mobile_modern'
        
        template = self.templates[template_name]
        
        # Get language-specific content
        content = self._get_language_content(language)
        
        # Prepare template variables
        template_vars = {
            'page_title': offer.headline,
            'main_headline': offer.headline,
            'sub_headline': offer.main_promise,
            'niche': brief.niche,
            'price': f"{brief.currency} {brief.target_price}",
            'price_number': str(brief.target_price),
            'currency': brief.currency,
            'proof_elements': offer.proof_elements,
            'bonuses': offer.bonuses,
            'guarantees': offer.guarantees,
            'price_justification': offer.price_justification,
            'urgency_elements': offer.urgency_elements,
            'cta_text': content['cta_text'],
            'guarantee_title': content['guarantee_title'],
            'bonus_title': content['bonus_title'],
            'proof_title': content['proof_title'],
            'about_title': content['about_title'],
            'footer_text': content['footer_text'],
            'current_year': datetime.now().year
        }
        
        # Generate HTML
        html_content = self._replace_template_vars(template['html'], template_vars)
        css_content = self._replace_template_vars(template['css'], template_vars)
        js_content = template['js']
        
        return {
            'html': html_content,
            'css': css_content,
            'js': js_content,
            'template_name': template_name,
            'generated_at': datetime.now().isoformat()
        }
    
    def generate_zip_export(
        self,
        landing_page: Dict[str, str],
        project_name: str
    ) -> str:
        """Generate a ZIP file containing the complete landing page"""
        
        # Create a BytesIO object to hold the ZIP file
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            # Add HTML file
            zip_file.writestr(f'{project_name}/index.html', landing_page['html'])
            
            # Add CSS file
            zip_file.writestr(f'{project_name}/styles.css', landing_page['css'])
            
            # Add JS file
            zip_file.writestr(f'{project_name}/script.js', landing_page['js'])
            
            # Add README
            readme_content = f"""# {project_name} - Landing Page
            
## Generated by OfferForge
Generated on: {landing_page.get('generated_at', 'Unknown')}
Template: {landing_page.get('template_name', 'Unknown')}

## Files Included:
- index.html - Main landing page
- styles.css - Styling and responsive design
- script.js - Interactive functionality

## How to Use:
1. Extract all files to a folder
2. Open index.html in a web browser
3. Upload to your web hosting service
4. Customize colors, images, and content as needed

## Mobile Optimized:
This landing page is fully responsive and optimized for mobile devices.
"""
            zip_file.writestr(f'{project_name}/README.md', readme_content)
        
        # Get the ZIP content as base64
        zip_buffer.seek(0)
        zip_base64 = base64.b64encode(zip_buffer.getvalue()).decode('utf-8')
        
        return zip_base64
    
    def _get_language_content(self, language: LanguageEnum) -> Dict[str, str]:
        """Get language-specific content for templates"""
        
        if language == LanguageEnum.PT_BR:
            return {
                'cta_text': 'QUERO COME√áAR AGORA',
                'guarantee_title': 'üõ°Ô∏è Garantia Total',
                'bonus_title': 'üéÅ B√¥nus Exclusivos',
                'proof_title': '‚úÖ Comprova√ß√£o',
                'about_title': 'Sobre Esta Oferta',
                'footer_text': 'Desenvolvido com OfferForge - Plataforma de Cria√ß√£o de Ofertas com IA'
            }
        else:  # EN_US
            return {
                'cta_text': 'GET STARTED NOW',
                'guarantee_title': 'üõ°Ô∏è Full Guarantee',
                'bonus_title': 'üéÅ Exclusive Bonuses',
                'proof_title': '‚úÖ Proof',
                'about_title': 'About This Offer',
                'footer_text': 'Built with OfferForge - AI-Powered Offer Creation Platform'
            }
    
    def _replace_template_vars(self, template: str, vars: Dict) -> str:
        """Replace template variables with actual values"""
        
        result = template
        
        for key, value in vars.items():
            if isinstance(value, list):
                # Handle lists (like bonuses, proof_elements)
                if key == 'proof_elements':
                    list_html = ''.join([f'<li class="proof-item">‚úÖ {item}</li>' for item in value])
                elif key == 'bonuses':
                    list_html = ''.join([f'<li class="bonus-item">üéÅ {item}</li>' for item in value])
                elif key == 'guarantees':
                    list_html = ''.join([f'<li class="guarantee-item">üõ°Ô∏è {item}</li>' for item in value])
                elif key == 'urgency_elements':
                    list_html = ''.join([f'<li class="urgency-item">‚ö° {item}</li>' for item in value])
                else:
                    list_html = ''.join([f'<li>{item}</li>' for item in value])
                
                result = result.replace(f'{{{{{key}}}}}', list_html)
            else:
                result = result.replace(f'{{{{{key}}}}}', str(value))
        
        return result
    
    def _get_mobile_modern_template(self) -> Dict[str, str]:
        """Modern mobile-first template"""
        
        html = """<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{page_title}}</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <h1 class="main-headline">{{main_headline}}</h1>
            <p class="sub-headline">{{sub_headline}}</p>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero">
        <div class="container">
            <div class="price-box">
                <span class="currency">{{currency}}</span>
                <span class="price">{{price_number}}</span>
                <p class="price-description">{{price_justification}}</p>
            </div>
            
            <button class="cta-button primary" onclick="scrollToCTA()">
                {{cta_text}}
            </button>
        </div>
    </section>

    <!-- Proof Section -->
    <section class="proof-section">
        <div class="container">
            <h2 class="section-title">{{proof_title}}</h2>
            <ul class="proof-list">
                {{proof_elements}}
            </ul>
        </div>
    </section>

    <!-- Bonuses Section -->
    <section class="bonuses-section">
        <div class="container">
            <h2 class="section-title">{{bonus_title}}</h2>
            <ul class="bonus-list">
                {{bonuses}}
            </ul>
        </div>
    </section>

    <!-- Guarantee Section -->
    <section class="guarantee-section">
        <div class="container">
            <h2 class="section-title">{{guarantee_title}}</h2>
            <ul class="guarantee-list">
                {{guarantees}}
            </ul>
        </div>
    </section>

    <!-- Urgency Section -->
    <section class="urgency-section">
        <div class="container">
            <h2 class="section-title">‚ö° Oferta Limitada</h2>
            <ul class="urgency-list">
                {{urgency_elements}}
            </ul>
        </div>
    </section>

    <!-- Final CTA -->
    <section class="final-cta" id="cta-section">
        <div class="container">
            <h2 class="cta-headline">N√£o Perca Esta Oportunidade!</h2>
            <div class="price-box">
                <span class="currency">{{currency}}</span>
                <span class="price">{{price_number}}</span>
            </div>
            <button class="cta-button primary large" onclick="handleCTAClick()">
                {{cta_text}}
            </button>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>{{footer_text}}</p>
            <p>&copy; {{current_year}} - Todos os direitos reservados</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>"""

        css = """/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    line-height: 1.6;
    color: #212529;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container {
    max-width: 390px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    padding: 32px 0;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.main-headline {
    font-size: 28px;
    font-weight: 800;
    color: #212529;
    margin-bottom: 12px;
    line-height: 1.2;
}

.sub-headline {
    font-size: 16px;
    color: #6c757d;
    font-weight: 500;
}

/* Hero Section */
.hero {
    padding: 40px 0;
    text-align: center;
}

.price-box {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 24px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.currency {
    font-size: 24px;
    font-weight: 600;
    color: #28a745;
    margin-right: 8px;
}

.price {
    font-size: 48px;
    font-weight: 800;
    color: #28a745;
}

.price-description {
    margin-top: 12px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
}

/* CTA Button */
.cta-button {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    border: none;
    border-radius: 12px;
    padding: 16px 32px;
    font-size: 16px;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 16px rgba(40, 167, 69, 0.4);
    width: 100%;
    max-width: 300px;
}

.cta-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(40, 167, 69, 0.6);
}

.cta-button.large {
    padding: 20px 40px;
    font-size: 18px;
}

/* Sections */
.proof-section,
.bonuses-section,
.guarantee-section,
.urgency-section {
    padding: 32px 0;
}

.proof-section {
    background: rgba(255, 255, 255, 0.9);
}

.bonuses-section {
    background: rgba(252, 248, 227, 0.9);
}

.guarantee-section {
    background: rgba(230, 252, 235, 0.9);
}

.urgency-section {
    background: rgba(255, 230, 230, 0.9);
}

.section-title {
    font-size: 24px;
    font-weight: 700;
    text-align: center;
    margin-bottom: 24px;
    color: #212529;
}

/* Lists */
.proof-list,
.bonus-list,
.guarantee-list,
.urgency-list {
    list-style: none;
    max-width: 100%;
}

.proof-item,
.bonus-item,
.guarantee-item,
.urgency-item {
    background: rgba(255, 255, 255, 0.8);
    margin-bottom: 12px;
    padding: 16px;
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.5;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

/* Final CTA */
.final-cta {
    background: linear-gradient(135deg, #212529 0%, #495057 100%);
    color: white;
    padding: 48px 0;
    text-align: center;
}

.cta-headline {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 24px;
    color: white;
}

.final-cta .price-box {
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
}

.final-cta .currency,
.final-cta .price {
    color: #28a745;
}

/* Footer */
.footer {
    background: #212529;
    color: #6c757d;
    padding: 24px 0;
    text-align: center;
    font-size: 12px;
}

/* Mobile Optimizations */
@media (max-width: 480px) {
    .container {
        padding: 0 16px;
    }
    
    .main-headline {
        font-size: 24px;
    }
    
    .price {
        font-size: 40px;
    }
    
    .section-title {
        font-size: 20px;
    }
}

/* Landscape Mobile */
@media (max-width: 767px) and (orientation: landscape) {
    .hero {
        padding: 20px 0;
    }
    
    .proof-section,
    .bonuses-section,
    .guarantee-section,
    .urgency-section {
        padding: 24px 0;
    }
}

/* Tablet and Desktop */
@media (min-width: 768px) {
    .container {
        max-width: 600px;
    }
    
    .main-headline {
        font-size: 36px;
    }
    
    .sub-headline {
        font-size: 18px;
    }
    
    .price {
        font-size: 56px;
    }
}"""

        js = """// Landing Page Interactions
function scrollToCTA() {
    const ctaSection = document.getElementById('cta-section');
    ctaSection.scrollIntoView({ 
        behavior: 'smooth',
        block: 'center'
    });
}

function handleCTAClick() {
    // Track conversion
    if (typeof gtag !== 'undefined') {
        gtag('event', 'conversion', {
            'send_to': 'YOUR_CONVERSION_ID',
            'value': 1.0,
            'currency': 'BRL'
        });
    }
    
    // Show success message or redirect
    alert('Obrigado pelo interesse! Em breve voc√™ ser√° redirecionado para o checkout.');
    
    // You can replace this with actual checkout URL
    // window.location.href = 'https://your-checkout-url.com';
}

// Add scroll animations
function addScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    // Observe all sections
    document.querySelectorAll('section').forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(30px)';
        section.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(section);
    });
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    addScrollAnimations();
    
    // Add click tracking to all CTA buttons
    document.querySelectorAll('.cta-button').forEach(button => {
        button.addEventListener('click', function() {
            // Track button clicks
            console.log('CTA clicked:', this.textContent);
        });
    });
});"""

        return {
            'html': html,
            'css': css,
            'js': js
        }
    
    def _get_classic_sales_template(self) -> Dict[str, str]:
        """Classic sales letter template"""
        # Simplified for brevity - you can expand this
        return {
            'html': '<!-- Classic template HTML -->',
            'css': '/* Classic template CSS */',
            'js': '// Classic template JS'
        }
    
    def _get_minimal_clean_template(self) -> Dict[str, str]:
        """Minimal clean template"""
        # Simplified for brevity - you can expand this
        return {
            'html': '<!-- Minimal template HTML -->',
            'css': '/* Minimal template CSS */',
            'js': '// Minimal template JS'
        }